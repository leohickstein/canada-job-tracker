import { useEffect, useState } from 'react'
import type { PersistState, ColumnKey, Persist } from '@/types/job'
import { loadState, saveState, setStatus } from '@/services/storageService'
export function usePersist(){ const [state, setState] = useState<PersistState>(()=>loadState()); useEffect(()=>{ saveState(state) },[state]); function updateItem(id:string, patch:Persist){ setState(prev=>({ ...prev, items:{ ...prev.items, [id]:{ ...(prev.items[id]||{}), ...patch } } })) } function moveToColumn(jobId:string, column:ColumnKey|null){ setState(prev=> setStatus(prev, jobId, column)) } function reorderColumn(column: ColumnKey, items:string[]){ setState(prev => { const prevItems = prev.boardOrder[column] || []; const same = prevItems.length===items.length && prevItems.every((v,i)=>v===items[i]); if (same) return prev; return { ...prev, boardOrder:{ ...prev.boardOrder, [column]: items } } }) } function ensureOrders(jobIds:string[]){ setState(prev=>{ const next = { ...prev, boardOrder:{ ...prev.boardOrder } }; const seen = new Set(jobIds); let changed = false; (Object.keys(next.boardOrder) as ColumnKey[]).forEach(k=>{ const filtered = (next.boardOrder[k]||[]).filter(id=>seen.has(id)); const prevList = next.boardOrder[k]||[]; const same = filtered.length===prevList.length && filtered.every((v,i)=>v===prevList[i]); if(!same){ next.boardOrder[k]=filtered; changed=true } }); return changed? next: prev }) } return { state, updateItem, moveToColumn, reorderColumn, ensureOrders } as const }